class Solution:
    
    def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -> bool:
        from collections import defaultdict
        courseDict = defaultdict(list)
       
        for relation in prerequisites:
            nextCourse, prevCourse = relation[0], relation[1]
            courseDict[prevCourse].append(nextCourse)
        
        checked = [False] * numCourses
        path = [False] * numCourses
        
        for currCourse in range(numCourses):
            if self.isCycle(currCourse, courseDict, path, checked):
                return False
        return True
    
    def isCycle(self, currCourse, courseDict, path, checked):
        if checked[currCourse] == True: 
            return False 
        
        if path[currCourse] == True:
            return True
        
        path[currCourse] = True 
        
        ret = False
        
        for child in courseDict[currCourse]: 
            ret = self.isCycle(child, courseDict,path,checked)
            if ret == True:
                break
                
        path[currCourse] = False  
        checked[currCourse] = True 
        return ret
